"use client";
import React, { useState, useEffect } from 'react';
import BaseGame from '../BaseGame';
import { GameProps } from '../types';

interface BurgerIngredient {
  id: string;
  name: string;
  emoji: string;
  order: number;
}

interface GameControlProps {
  endGame: (success: boolean, message?: string, score?: number) => void;
  updateMessage: (message: string) => void;
  onVoiceInput?: (transcript: string) => void;
  sendVoiceMessage?: (message: string) => void;
  playSound?: (soundId: string) => void;
}

const burgerIngredients: BurgerIngredient[] = [
  { id: 'bottom-bun', name: 'bottom bun', emoji: '🟤', order: 1 },
  { id: 'lettuce', name: 'lettuce', emoji: '🥬', order: 2 },
  { id: 'tomato', name: 'tomato', emoji: '🍅', order: 3 },
  { id: 'cheese', name: 'cheese', emoji: '🧀', order: 4 },
  { id: 'patty', name: 'patty', emoji: '🥩', order: 5 },
  { id: 'onion', name: 'onion', emoji: '🧅', order: 6 },
  { id: 'top-bun', name: 'top bun', emoji: '🟫', order: 7 },
];

function AssembleTheBurgerGame({ endGame, updateMessage, onVoiceInput, sendVoiceMessage, playSound }: GameControlProps) {
  const [displayedIngredients, setDisplayedIngredients] = useState<BurgerIngredient[]>([]);
  const [userOrder, setUserOrder] = useState<string[]>([]);
  const [hasAnswered, setHasAnswered] = useState(false);
  const [showingIngredients, setShowingIngredients] = useState(true);

  useEffect(() => {
    // Shuffle ingredients for display
    const shuffled = [...burgerIngredients].sort(() => Math.random() - 0.5);
    setDisplayedIngredients(shuffled);
    
    updateMessage('Memorize these burger ingredients!');\n    if (sendVoiceMessage) {\n      sendVoiceMessage('Welcome to Burger Assembly! I\\'m going to show you all the ingredients for a perfect burger. Pay attention to what you see, then tell me the correct order to stack them from bottom to top!');\n    }\n\n    // Hide ingredients after 5 seconds\n    const hideTimer = setTimeout(() => {\n      setShowingIngredients(false);\n      updateMessage('Now tell me the correct order from bottom to top!');\n      if (sendVoiceMessage) {\n        sendVoiceMessage('Time to build that burger! Tell me the ingredients in the correct order from bottom to top. Remember: bottom bun first, then lettuce, tomato, cheese, patty, onion, and top bun!');\n      }\n    }, 5000);\n\n    return () => clearTimeout(hideTimer);\n  }, [updateMessage, sendVoiceMessage]);\n\n  useEffect(() => {\n    if (onVoiceInput && !hasAnswered && !showingIngredients) {\n      const handleVoiceInput = (transcript: string) => {\n        const input = transcript.toLowerCase().trim();\n        \n        if (input.length > 20) { // Substantial ordering attempt\n          setHasAnswered(true);\n          \n          // Extract mentioned ingredients\n          const mentionedIngredients: string[] = [];\n          burgerIngredients.forEach(ingredient => {\n            if (input.includes(ingredient.name) || input.includes(ingredient.id.replace('-', ' '))) {\n              mentionedIngredients.push(ingredient.name);\n            }\n          });\n          \n          setUserOrder(mentionedIngredients);\n          \n          // Check correctness\n          const correctOrder = burgerIngredients\n            .sort((a, b) => a.order - b.order)\n            .map(ing => ing.name);\n          \n          let score = 0;\n          let correctPositions = 0;\n          \n          // Check how many ingredients are in correct positions\n          for (let i = 0; i < Math.min(mentionedIngredients.length, correctOrder.length); i++) {\n            if (mentionedIngredients[i] === correctOrder[i]) {\n              correctPositions++;\n              score += 15;\n            }\n          }\n          \n          // Bonus for mentioning all ingredients\n          if (mentionedIngredients.length === correctOrder.length) {\n            score += 10;\n          }\n          \n          // Check if buns are in right places (critical)\n          const hasBottomBunFirst = mentionedIngredients[0] === 'bottom bun';\n          const hasTopBunLast = mentionedIngredients[mentionedIngredients.length - 1] === 'top bun';\n          \n          if (hasBottomBunFirst) score += 10;\n          if (hasTopBunLast) score += 10;\n          \n          if (score >= 80) {\n            updateMessage('Perfect burger! The chef is impressed!');\n            if (sendVoiceMessage) {\n              sendVoiceMessage('Outstanding! You\\'ve built the perfect burger! Every ingredient is in exactly the right place. The chef gives you a standing ovation!');\n            }\n            \n            if (playSound) {\n              playSound('cooking-success');\n            }\n            \n            endGame(true, 'Master chef! Perfect burger assembly!', score);\n          } else if (score >= 50) {\n            updateMessage('Good attempt! Most ingredients are in the right place.');\n            if (sendVoiceMessage) {\n              sendVoiceMessage('Not bad! You got most of the burger right. The chef nods approvingly, though there\\'s room for improvement in your stacking technique.');\n            }\n            endGame(true, 'Decent burger! Some ingredients out of place.', score);\n          } else {\n            updateMessage('Hmm, that burger looks a bit mixed up...');\n            if (sendVoiceMessage) {\n              sendVoiceMessage('Oh dear! That burger is quite jumbled. The chef scratches his head in confusion. Maybe you need more practice with burger architecture!');\n            }\n            endGame(false, 'Burger disaster! Wrong ingredient order.', Math.max(10, score));\n          }\n        }\n      };\n      \n      onVoiceInput(handleVoiceInput);\n    }\n  }, [onVoiceInput, hasAnswered, showingIngredients, endGame, updateMessage, sendVoiceMessage, playSound]);\n\n  return (\n    <div className=\"text-center max-w-2xl bg-gradient-to-br from-yellow-200 via-orange-200 to-red-200 rounded-lg p-8\">\n      <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6 border-4 border-orange-400\">\n        <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">🍔 Assemble The Burger!</h2>\n        \n        {showingIngredients ? (\n          <div>\n            <div className=\"text-lg font-semibold text-gray-700 mb-4\">\n              Memorize these ingredients:\n            </div>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mb-6\">\n              {displayedIngredients.map((ingredient) => (\n                <div key={ingredient.id} className=\"bg-gray-100 rounded-lg p-4 border-2 border-gray-300\">\n                  <div className=\"text-4xl mb-2\">{ingredient.emoji}</div>\n                  <div className=\"text-sm font-semibold text-gray-700\">\n                    {ingredient.name.charAt(0).toUpperCase() + ingredient.name.slice(1)}\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"text-orange-600 font-bold animate-pulse\">\n              Study these ingredients carefully!\n            </div>\n          </div>\n        ) : (\n          <div>\n            <div className=\"bg-orange-50 border-2 border-orange-300 rounded-lg p-6 mb-6\">\n              <div className=\"text-6xl mb-4\">🍔</div>\n              <h3 className=\"text-xl font-bold text-orange-800 mb-4\">\n                Build Your Burger!\n              </h3>\n              <p className=\"text-orange-700 mb-4\">\n                Tell me the ingredients in order from bottom to top\n              </p>\n              <div className=\"text-sm text-orange-600\">\n                Start with the bottom bun and work your way up!\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 border-2 border-blue-200 rounded-lg p-4\">\n              <div className=\"text-3xl mb-2\">🎤</div>\n              <p className=\"text-lg font-semibold text-blue-800 mb-2\">\n                Say the ingredients in order!\n              </p>\n              <p className=\"text-sm text-blue-600\">\n                Example: \"Bottom bun, lettuce, tomato...\"\n              </p>\n              \n              {hasAnswered && (\n                <div className=\"mt-4 text-blue-600\">\n                  <div className=\"animate-spin text-2xl mb-2\">🍔</div>\n                  <p>The chef is checking your order...</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Cooking atmosphere */}\n      <div className=\"flex justify-center space-x-4 text-2xl opacity-50\">\n        <span className=\"animate-bounce\">👨‍🍳</span>\n        <span className=\"animate-bounce\" style={{ animationDelay: '0.2s' }}>🔥</span>\n        <span className=\"animate-bounce\" style={{ animationDelay: '0.4s' }}>🍳</span>\n        <span className=\"animate-bounce\" style={{ animationDelay: '0.6s' }}>🧑‍🍳</span>\n      </div>\n    </div>\n  );\n}\n\nexport default function AssembleTheBurgerGameComponent(props: GameProps) {\n  return (\n    <BaseGame\n      title=\"Assemble The Burger\"\n      instructions=\"Memorize the ingredients and say them in the correct stacking order!\"\n      duration={12}\n      {...props}\n    >\n      <AssembleTheBurgerGame />\n    </BaseGame>\n  );\n}"