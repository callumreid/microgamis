"use client";
import React, { useState, useEffect } from 'react';
import BaseGame from '../BaseGame';
import { GameProps } from '../types';

interface GameControlProps {
  endGame: (success: boolean, message?: string, score?: number) => void;
  updateMessage: (message: string) => void;
  onVoiceInput?: (transcript: string) => void;
  sendVoiceMessage?: (message: string) => void;
  playSound?: (soundId: string) => void;
}

function AttractTheTurkeyGame({ endGame, updateMessage, onVoiceInput, sendVoiceMessage, playSound }: GameControlProps) {
  const [turkeyPosition, setTurkeyPosition] = useState(80); // Start far away
  const [turkeyMood, setTurkeyMood] = useState<'shy' | 'curious' | 'approaching' | 'close'>('shy');
  const [hasAnswered, setHasAnswered] = useState(false);
  const [attempts, setAttempts] = useState(0);

  useEffect(() => {
    updateMessage('There\\'s a shy turkey in the distance. Make turkey sounds to attract it!');
    if (sendVoiceMessage) {
      sendVoiceMessage('Look! There\\'s a beautiful turkey way over there, but it\\'s very shy. You need to make turkey sounds to get its attention and call it over. Try gobbling, clucking, or making turkey noises!');
    }
  }, [updateMessage, sendVoiceMessage]);

  useEffect(() => {
    if (onVoiceInput && !hasAnswered) {
      const handleVoiceInput = (transcript: string) => {
        const input = transcript.toLowerCase().trim();
        
        // Turkey sound keywords\n        const turkeyKeywords = [\n          'gobble', 'gobbl', 'turkey', 'cluck', 'clucking', \n          'purr', 'yelp', 'chirp', 'peep', 'trill'\n        ];\n        \n        // Check for turkey sounds\n        const hasTurkeySounds = turkeyKeywords.some(keyword => input.includes(keyword));\n        \n        // Check for enthusiasm (repeated sounds, exclamation)\n        const isEnthusiastic = input.includes('!') || input.length > 20 || \n                              input.includes(' ') && input.split(' ').length > 3;\n        \n        setAttempts(prev => prev + 1);\n        \n        if (hasTurkeySounds) {\n          const newPosition = Math.max(10, turkeyPosition - (isEnthusiastic ? 25 : 15));\n          setTurkeyPosition(newPosition);\n          \n          if (newPosition <= 20) {\n            setTurkeyMood('close');\n            setHasAnswered(true);\n            updateMessage('Success! The turkey came right up to you!');\n            \n            if (playSound) {\n              playSound('turkey-gobble');\n            }\n            \n            if (sendVoiceMessage) {\n              sendVoiceMessage('Wonderful! Your turkey sounds were so convincing that the turkey came right over! It\\'s now gobbling happily beside you!');\n            }\n            \n            const score = 100 - (attempts * 10);\n            endGame(true, 'Turkey whisperer! You attracted the turkey!', Math.max(20, score));\n          } else if (newPosition <= 40) {\n            setTurkeyMood('approaching');\n            updateMessage('Great! The turkey is getting closer! Keep making turkey sounds!');\n            if (sendVoiceMessage) {\n              sendVoiceMessage('Excellent! The turkey is definitely interested and moving closer. Keep up those turkey calls!');\n            }\n          } else {\n            setTurkeyMood('curious');\n            updateMessage('The turkey heard you! It\\'s looking this way. Try more turkey sounds!');\n            if (sendVoiceMessage) {\n              sendVoiceMessage('Good start! The turkey lifted its head and is looking in your direction. Make more turkey sounds to get it to come over!');\n            }\n          }\n        } else {\n          // Non-turkey sounds might scare it away\n          const newPosition = Math.min(90, turkeyPosition + 10);\n          setTurkeyPosition(newPosition);\n          setTurkeyMood('shy');\n          \n          updateMessage('That doesn\\'t sound like a turkey! It\\'s moving away. Try gobbling!');\n          if (sendVoiceMessage) {\n            sendVoiceMessage('Oh no! That sound confused the turkey and it stepped back. Remember, you need to make turkey sounds - try gobbling or clucking!');\n          }\n        }\n        \n        // End game if too many attempts or turkey too far\n        if (attempts >= 5 || turkeyPosition > 95) {\n          setHasAnswered(true);\n          updateMessage('The turkey got spooked and ran away!');\n          if (sendVoiceMessage) {\n            sendVoiceMessage('Oh dear! The turkey got too confused or scared by all the commotion and decided to run away into the woods. Better luck next time!');\n          }\n          endGame(false, 'The turkey flew away! Practice your turkey calls.', 0);\n        }\n      };\n      \n      onVoiceInput(handleVoiceInput);\n    }\n  }, [onVoiceInput, hasAnswered, turkeyPosition, attempts, endGame, updateMessage, sendVoiceMessage, playSound]);\n\n  const getTurkeyEmoji = () => {\n    switch (turkeyMood) {\n      case 'shy': return '🦃';\n      case 'curious': return '🦃';\n      case 'approaching': return '🦃';\n      case 'close': return '🦃';\n      default: return '🦃';\n    }\n  };\n\n  const getTurkeySize = () => {\n    return turkeyPosition > 60 ? 'text-2xl' : turkeyPosition > 30 ? 'text-4xl' : 'text-6xl';\n  };\n\n  return (\n    <div className=\"w-full h-full relative bg-gradient-to-b from-orange-200 via-yellow-200 to-green-300 overflow-hidden\">\n      {/* Fall forest background */}\n      <div className=\"absolute inset-0\">\n        {/* Trees */}\n        <div className=\"absolute bottom-0 left-10 text-6xl opacity-60\">🌳</div>\n        <div className=\"absolute bottom-0 right-20 text-5xl opacity-50\">🌲</div>\n        <div className=\"absolute bottom-0 left-1/3 text-4xl opacity-40\">🌳</div>\n        <div className=\"absolute bottom-0 right-1/3 text-5xl opacity-55\">🌲</div>\n        \n        {/* Autumn leaves */}\n        <div className=\"absolute top-10 left-16 text-2xl animate-fall\">🍂</div>\n        <div className=\"absolute top-8 right-24 text-xl animate-fall-delayed\">🍁</div>\n        <div className=\"absolute top-12 left-2/3 text-2xl animate-fall\">🍂</div>\n      </div>\n\n      {/* Ground */}\n      <div className=\"absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-amber-600 to-amber-400\">\n        {/* Scattered leaves on ground */}\n        <div className=\"absolute top-2 left-1/4 text-xl\">🍂</div>\n        <div className=\"absolute top-1 right-1/3 text-lg\">🍁</div>\n        <div className=\"absolute top-3 left-2/3 text-xl\">🍂</div>\n      </div>\n\n      {/* Turkey */}\n      <div \n        className={`absolute bottom-16 transition-all duration-1000 ${getTurkeySize()}`}\n        style={{ \n          right: `${turkeyPosition}%`,\n          transform: `translateX(50%) ${turkeyMood === 'approaching' ? 'scale(1.1)' : 'scale(1)'}`,\n        }}\n      >\n        <div className={`${turkeyMood === 'curious' ? 'animate-bounce' : turkeyMood === 'approaching' ? 'animate-waddle' : ''}`}>\n          {getTurkeyEmoji()}\n        </div>\n        \n        {/* Turkey mood indicator */}\n        <div className=\"text-xs text-center bg-brown-600 bg-opacity-70 text-white rounded px-2 py-1 mt-1\">\n          {turkeyMood.toUpperCase()}\n        </div>\n      </div>\n\n      {/* Player */}\n      <div className=\"absolute bottom-16 left-8\">\n        <div className=\"text-4xl\">🚶‍♂️</div>\n        <div className=\"text-xs text-center bg-black bg-opacity-50 text-white rounded px-2 py-1 mt-1\">\n          YOU\n        </div>\n      </div>\n\n      {/* Distance indicator */}\n      <div className=\"absolute top-4 right-4 bg-black bg-opacity-50 text-white p-3 rounded\">\n        <div className=\"text-sm font-bold mb-2\">Turkey Distance</div>\n        <div className=\"w-32 h-4 bg-gray-700 rounded\">\n          <div \n            className=\"h-full bg-orange-500 rounded transition-all duration-1000\"\n            style={{ width: `${100 - turkeyPosition}%` }}\n          ></div>\n        </div>\n        <div className=\"text-xs mt-1\">\n          {turkeyPosition > 70 ? 'Very Far' : turkeyPosition > 40 ? 'Getting Closer' : turkeyPosition > 20 ? 'Almost Here' : 'Very Close!'}\n        </div>\n      </div>\n\n      {/* Instructions */}\n      {!hasAnswered && (\n        <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-70 text-white p-4 rounded-lg text-center max-w-md\">\n          <p className=\"text-lg font-bold\">🎤 Make turkey sounds!</p>\n          <p className=\"text-sm\">Say \"gobble gobble\" or make clucking noises</p>\n          <p className=\"text-xs mt-2 opacity-75\">Attempts: {attempts}/5</p>\n        </div>\n      )}\n\n      {/* Sound effects visualization */}\n      {turkeyMood !== 'shy' && (\n        <div className=\"absolute left-20 bottom-32\">\n          <div className=\"text-2xl animate-pulse\">💨</div>\n          <div className=\"text-sm bg-yellow-400 text-black rounded px-2 py-1 mt-1\">\n            Gobble?\n          </div>\n        </div>\n      )}\n\n      <style jsx>{`\n        @keyframes fall {\n          0% { transform: translateY(-10px) rotate(0deg); }\n          100% { transform: translateY(20px) rotate(180deg); }\n        }\n        @keyframes fall-delayed {\n          0% { transform: translateY(-10px) rotate(0deg); }\n          100% { transform: translateY(25px) rotate(-180deg); }\n        }\n        @keyframes waddle {\n          0%, 100% { transform: translateX(0px); }\n          25% { transform: translateX(-3px); }\n          75% { transform: translateX(3px); }\n        }\n        .animate-fall { animation: fall 4s ease-in infinite; }\n        .animate-fall-delayed { animation: fall-delayed 5s ease-in infinite; }\n        .animate-waddle { animation: waddle 0.8s ease-in-out infinite; }\n      `}</style>\n    </div>\n  );\n}\n\nexport default function AttractTheTurkeyGameComponent(props: GameProps) {\n  return (\n    <BaseGame\n      title=\"Attract The Turkey\"\n      instructions=\"Make turkey sounds to call the shy turkey over to you!\"\n      duration={12}\n      {...props}\n    >\n      <AttractTheTurkeyGame />\n    </BaseGame>\n  );\n}"